# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    "core/python/ttfcoreui"
]

line-length = 90
indent-width = 4


# Assume Python 3.9
target-version = "py39"

[lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
# 1. Enable flake8-bugbear (`B`) rules, in addition to the defaults.
select = [
#    "I", # isort - https://docs.astral.sh/ruff/rules/#isort-i
#    "TCH", # flake8-type-checking - https://docs.astral.sh/ruff/rules/#flake8-type-checking-tch
    "A", # flake8-builtins - https://docs.astral.sh/ruff/rules/#flake8-builtins-a
    "ARG", # flake8-unused-arguments - https://docs.astral.sh/ruff/rules/#flake8-unused-arguments-arg
    "B", # flake8-bugbear - https://docs.astral.sh/ruff/rules/#flake8-bugbear-b
    "C4", # flake8-comprehensions - https://docs.astral.sh/ruff/rules/#flake8-comprehensions-c4
    "D", # pydocstyle - https://docs.astral.sh/ruff/rules/#pydocstyle-d
    "E", # pycodestyle - https://docs.astral.sh/ruff/rules/#error-e
    "EM", # flake8-errmsg - https://docs.astral.sh/ruff/rules/#flake8-errmsg-em
    "F",  # Pyflakes - https://docs.astral.sh/ruff/rules/#pyflakes-f
    "FA", # flake8-future-annotations - https://docs.astral.sh/ruff/rules/#flake8-future-annotations-fa
    "G", # flake8-logging-format - https://docs.astral.sh/ruff/rules/#flake8-logging-format-g
    "ISC", # flake8-implicit-str-concat - https://docs.astral.sh/ruff/rules/#flake8-implicit-str-concat-isc
    "N", # pep8-naming - https://docs.astral.sh/ruff/rules/#pep8-naming-n
    "PERF", # Perflint - https://docs.astral.sh/ruff/rules/#perflint-perf
    "PL", # Pylint - https://docs.astral.sh/ruff/rules/#pylint-pl
    "PYI", # flake8-pyi - https://docs.astral.sh/ruff/rules/#flake8-pyi-pyi
    "RET", # flake8-return - https://docs.astral.sh/ruff/rules/#flake8-return-ret
    "RSE", # flake8-raise - https://docs.astral.sh/ruff/rules/#flake8-raise-rse
    "RUF", # RUF - https://docs.astral.sh/ruff/rules/#ruff-specific-rules-ruf
    "S", # flake8-bandit - https://docs.astral.sh/ruff/rules/#flake8-bandit-s
    "SIM", # flake8-simplify - https://docs.astral.sh/ruff/rules/#flake8-simplify-sim
    "UP", # pyupgrade - https://docs.astral.sh/ruff/rules/#pyupgrade-up
    "YTT", # flake8-2020 - https://docs.astral.sh/ruff/rules/#flake8-2020-ytt
    "ANN", # flake8-annotations - https://docs.astral.sh/ruff/rules/#flake8-annotations-ann
]

ignore = [
    "ANN101", # Noise about type-hinting 'self' which they admit is unnecessary.
    "ANN202", # Return typehints in private functions. (Nice, but not mandated.)
    "ANN204", # Return types for __init__
    "ANN401", # https://docs.astral.sh/ruff/rules/any-type/
    "ARG002", # Unused function arguments (Valid in many situations e.g. Qt Slots)
    "B026", # https://docs.astral.sh/ruff/rules/star-arg-unpacking-after-keyword-arg/
    "C408", # suggesting {}, [] instead of dict(), list() (technically valid but SO VERY pedantic)
    "D105", # docstrings for magic methods e.g. __str__, whose behavior is standard
    "D107", # Docstrings in __init__. It makes an instance. Document if it needs more info than that.
    "D200", # https://docs.astral.sh/ruff/rules/fits-on-one-line/
    "D202", # https://docs.astral.sh/ruff/rules/no-blank-line-after-function/
    "D205", # https://docs.astral.sh/ruff/rules/blank-line-after-summary/
    "D209", # Rules for closing quotes in docstrings. Nobody's eyeballs are this fragile.
    "D210", # super-nitpicky and ugly reccomend for docstring whitespace
    "D212", # https://docs.astral.sh/ruff/rules/multi-line-summary-first-line/
    "D415", # Punctuation in docstring lines
    "E203", # https://black.readthedocs.io/en/stable/guides/using_black_with_other_tools.html#flake8
    "E401",  # https://docs.astral.sh/ruff/rules/multiple-imports-on-one-line/
    "E402", # https://docs.astral.sh/ruff/rules/module-import-not-at-top-of-file/
    "E501", # https://docs.astral.sh/ruff/rules/line-too-long/
    "EM103", # Extremely weak and inconsistent reasoning for ban on .format() in raise statements.
    "F401", # https://docs.astral.sh/ruff/rules/unused-import/
    "N802", # https://docs.astral.sh/ruff/rules/invalid-function-name/
    "N805", # https://docs.astral.sh/ruff/rules/invalid-first-argument-name-for-method/
    "PERF402", # https://docs.astral.sh/ruff/rules/manual-list-copy/
    "PLR0402", # https://docs.astral.sh/ruff/rules/manual-from-import/
    "PLR0911", # https://docs.astral.sh/ruff/rules/too-many-return-statements/
    "PLR0912", # https://docs.astral.sh/ruff/rules/too-many-branches/
    "PLR0913", # https://docs.astral.sh/ruff/rules/too-many-arguments/
    "PLR0914", # https://docs.astral.sh/ruff/rules/too-many-locals/
    "PLR0915", # https://docs.astral.sh/ruff/rules/too-many-statements/
    "PLR0917", # https://docs.astral.sh/ruff/rules/too-many-positional/
    "PLW0603", # https://docs.astral.sh/ruff/rules/global-statement/
    "RET504", # https://docs.astral.sh/ruff/rules/unnecessary-assign/
    "RET505", # This check is full-on incorrect and asks you to break your code.
    "RET506", # This check is outright wrong
    "RUF005", # https://docs.astral.sh/ruff/rules/collection-literal-concatenation/
    "RUF010", # https://docs.astral.sh/ruff/rules/explicit-f-string-type-conversion/
    "RUF012", # https://docs.astral.sh/ruff/rules/mutable-class-default/
    "SIM108", # Demands the "x = y if c else q" syntax we all agreed we want to burn with fire
    "UP015", # https://docs.astral.sh/ruff/rules/redundant-open-modes/
    "UP032", # Look y'all, you format your strings how you feel you need to.

    # Disabled until discontinuation of Python 3.9
    "UP007", # https://docs.astral.sh/ruff/rules/non-pep604-annotation/
    "G001", # https://docs.astral.sh/ruff/rules/logging-string-format/
    "G002", # https://docs.astral.sh/ruff/rules/logging-percent-format/
    "G003", # https://docs.astral.sh/ruff/rules/logging-string-concat/
    "G004", # https://docs.astral.sh/ruff/rules/logging-f-string/
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = [
    "B"  # Avoid trying to fix flake8-bugbear (`B`) violations.
]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[format]
quote-style = "preserve"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[lint.pydocstyle]
convention = "google"  # Accepts: "google", "numpy", or "pep257".

[lint.per-file-ignores]
"ttfcore/deadline/scripts/*" = ["E501"]